## thread-scheduler.api
## COPYRIGHT (c) 1989-1991 John H. Reppy

# Compiled by:
#     src/lib/std/standard.lib

# This api is implemented in:
#
#     src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg

stipulate
    package fat =  fate;									# fate				is from   src/lib/std/src/nj/fate.pkg
    package itt =  internal_threadkit_types;							# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg
    package rwq =  rw_queue;									# rw_queue			is from   src/lib/src/rw-queue.pkg
    package tim =  time;									# time				is from   src/lib/std/time.pkg
    package wnx =  winix;									# winix				is from   src/lib/std/winix.pkg
    #
    Fate(X) =  fat::Fate(X);
    Thread_State  =  itt::Thread_State;
herein

    api Thread_Scheduler {
	#
	foreground_run_queue:   rwq::Rw_Queue( (Thread_State,  Fate( Void)) );			# Referenced in		src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
												# and			src/lib/src/lib/thread-kit/src/glue/threadkit-base-for-os-g.pkg
	get_current_thread:  Void -> Thread_State;
	set_current_thread:  Thread_State -> Void;

	push_into_run_queue:  (Thread_State, Fate(Void)) -> Void;				# Run fate under thread when we get a chance.

	run_thread:  (Thread_State, Fate(Void)) -> Void;					# A variant of add_to_run_queue which additionally schedules it to run immediately.
	    #
	    # Enqueue the given fate with the
	    # current thread ID, and make the
	    # given thread ID be the current one.


	run_thunk_immediately:  (Void -> Void) -> Void;						# A variant of run_thread which uses a temporary thread to run the thunk.
	    #
	    # Create a temporary thread (with dummy ID) to run the given
	    # function and then exit.
	    #
	    # NB: The thread is placed at the FRONT of the run queue
	    #     for immediate execution, instead of being placed at
	    #     the back to wait its turn.

												# Nomenclature: What I'm calling "indivisible scope" is usually called "critical section" or "atomic region"
												# in the literature.  I dislike "critical" because it is vague. ("critical" in what sense? Who knows?)
												# "atomic" is literally correct ("a-tomic" == "not cuttable" -- indivisible) but the modern reader is not
												# likely to take it in that sense at first blush.  And neither "section" nor "region" are as apropos as "scope".
												# (If we were going to use the term a lot I might favor "unit scope", but I do not expect we will.)
	Thread_Scheduler_State
	    #
	    = NORMAL_STATE									# Normal state.
	    | IN_UNINTERRUPTABLE_SCOPE								# We are in a critical section -- switching threads is Not Ok.
	    | IN_UNINTERRUPTABLE_SCOPE_WITH_PENDING_THREADSWITCH					# We had a switch-threads request while in a critical section -- need to switch as soon as we exit the critical section.
	    ;

	thread_scheduler_state:  Ref(  Thread_Scheduler_State );				#

	disable_thread_switching:  Void -> Void;
	reenable_thread_switching:  Void -> Void;
	    #
	    # Enter/leave a critical section.
	    # These do NOT nest!

	reenable_thread_switching_and_dispatch_next_thread:  Void -> X;
	    #
	    # Leave the critical section
	    # and dispatch the next thread.

	dispatch_next_thread:  Void -> X;
	    #
	    # Dispatch the next thread.
	    #
	    # This should NOT be called
	    # while in a critical section.
	    # In a critical section use:
	    #     reenable_thread_switching_and_dispatch_next_thread ();


	reenable_thread_switching_and_switch_to_thread:  (Thread_State, Fate(X), X) -> Void;
	    #
	    # Switch to the given thread
	    # while leaving a critical section.

	reenable_thread_switching_and_yield_to_next_thread:  Fate(Void) -> X;
	    #
	    # Yield control to the next thread
	    # while leaving the critical section.


	switch_to_next_runnable_thread__hook:  Ref(  Fate(  Void ) );
	    #
	    # This hook points to a fate that
	    # gets dispatched when a preemption
	    # is received or when a thread exits
	    # a critical section and there is a
	    # signal pending.
	    #
	    # It is invoked after re-enabling
	    # thread scheduling -- that is,
	    # after exiting the critical section.


	no_runnable_threads_left__hook:  Ref(  Fate(  Void ) );
	    #
	    # This hook points to a fate that gets invoked when
	    # when the scheduler has nothing else to do.


	shutdown_hook:    Ref( Fate ((Bool, wnx::process::Status)) );
	    #
	    # This hook points to a fate that
	    # gets invoked when the system is
	    # otherwise deadlocked.  It is
	    # also invoked by  run_threadkit::shutdown.
	    #
	    # It takes two arguments:
	    #  o A boolean flag that says whether to do clean-up.
	    #  o The exit status.


	get_approximate_time:  Void -> tim::Time;
	    #
	    # Get an approximation of the current time of day.
	    #
	    # The value returned was obtained from the operating
	    # system via
	    #     tim::get_time ();
	    # during the current timeslice, so it is off
	    # by at most the length of that timeslice.


	reset_thread_scheduler:  Bool -> Void;

	# Control over the preemptive timer 
	#
	start_thread_scheduler_timer:    tim::Time -> Void;			# Called from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control-g.pkg
										# Called from   src/lib/src/lib/thread-kit/src/glue/threadkit-base-for-os-g.pkg

	stop_thread_scheduler_timer:     Void -> Void;				# Called from   src/lib/std/src/posix/threadkit-winix-process.pkg
										# Called from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control-g.pkg
										# Called from   src/lib/src/lib/thread-kit/src/glue/threadkit-base-for-os-g.pkg
										# Called from   src/lib/std/src/threadkit/posix/retry-syscall-on-eintr.pkg
										# Called from   src/lib/std/src/posix/threadkit-spawn.pkg

	restart_thread_scheduler_timer:  Void -> Void;				# Called from   src/lib/std/src/posix/threadkit-winix-process.pkg
										# Called from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control-g.pkg
										# Called from   src/lib/src/lib/thread-kit/src/glue/threadkit-base-for-os-g.pkg
										# Called from   src/lib/std/src/threadkit/posix/retry-syscall-on-eintr.pkg
										# Called from   src/lib/std/src/posix/threadkit-spawn.pkg


	Do_Echo = { what:  String,						# 'what' will be passed to 'reply'.
		    reply: String -> Void
		  };
        echo:  		Do_Echo -> Void;					# To be called from other pthreads.
	do:		(Void -> Void) -> Void;					# Execute arbitrary code in the context of the scheduler thread.
	timeslice:	 Void          -> Void;					# Tell scheduler it is time to consider pre-empting current thread and scheduling another thread.

	trace_backpatchfn: Ref( (Void -> String) -> Void );			# A tracelog kludge of no general interest, used (only) in src/lib/src/lib/thread-kit/src/lib/logger.pkg
    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
