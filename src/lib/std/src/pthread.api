# pthread.api
#
# [ This is a low-level interface;  Mythryl application programmers  
#   in search of concurrency should use threadkit instead.  
# 
#   The pthread library is intended mainly as support for library bindings 
#   to  Gtk, OpenGL and the like, so that they can block their own  
#   pthread without stopping threadkit execution dead in the water. 
# 
#   It might also be useful for gaining parallelism in CPU-intensive 
#   apps like mandelbrot-set viewers or raytracers or such. 
# 
#   pthread is a minefield of potential deadlocks, race conditions and  
#   datastructure corruption, so it should be used only when absolutely  
#   needed, and then only as minimally, simply and carefully as practical. 
# ]
#
# Overview
# ========
#
# Posix-thread support for Mythryl.  The original work this
# is based on was
#
#      A Portable Multiprocessor Interface for Standard ML of New Jersey 
#      Morrisett + Tolmach 1992 31p 
#      http://handle.dtic.mil/100.2/ADA255639
#      http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps 
#
# The central problems are
#
#   1) How to maintain Mythryl heap coherency in the
#      face of multiple kernel threads executing Mythryl
#      code in parallel while retaining good performance.
#
#   2) How to handle garbage collection.
#
# The matching solutions they adopted are:
#
#   1) Most heap allocation is done in generation zero;
#      by giving each kernel thread its own independent
#      generation zero, each can allocate at full speed
#      without locking overhead.
#
#      Allocation is also done directly into later heap
#      generations, but this happens to seldom as to be
#      non performance critical, so conventional mutex
#      locking can be used without problem.
#      
#   2) Parallel garbage collection is difficult;  for ease
#      of implementation (and debugging!) the existing
#      garbage collector is used running on a single kernel
#      thread.
#
#      This mainly requires implementing a new protocol for
#      initiating garbage collection which stops all other
#      Mythryl-executing kernel threads, so as to have the
#      heap completely quiescient while garbage collection
#      is being done.
#
# This is strictly a toe-in-the-water minimal implementation
# of Mythryl multiprocessing.  Cheng's 2001 thesis CU shows
# how to do an all-singing all-dancing all-scalable all-parallel
# implementation:  See  http://mythryl.org/pub/pml/
#
# The critical files for this facility are:
#
#     src/c/lib/pthread/libmythryl-pthread.c		Our Mythryl<->C world interface logic.
#
#     src/c/pthread/pthread-on-posix-threads.c          Our interface to the <ptheads.h> library proper.
#
#     src/c/h/runtime-pthread.h                         Our API for the previous file.
#
#     src/c/heapcleaner/pthread-heapcleaner-stuff.c	Added logic to stop all posix threads before starting
#							garbage collection and restart them after it is complete.
#
#     src/c/heapcleaner/call-heapcleaner.c		(Pre-existing file): Tweaks to invoke previous file and
#							to cope with having garbage collector roots in multiple
#							posix threads instead of just one.
#
#     src/c/mythryl-config.h				Critical configuration stuff, in particular
#							 NEED_PTHREAD_SUPPORT and MAX_PTHREADS.
#
#     src/lib/std/src/pthread.api			Mythryl-programmer interface to posix-threads functionality.
#     src/lib/std/src/pthread.pkg			Implementation of previous; this is just wrappers for the calls
#							exported by src/c/lib/pthread/libmythryl-pthread.c
#
#
#

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package fat =  fate;						# fate					is from   src/lib/std/src/nj/fate.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/std/src/pthread.pkg
    #
    api Pthread {
	#
	# For the moment this is translated directly from p7 of
	#
	#       A Portable Multiprocessor Interface for Standard ML of New Jersey 
	#       Morrisett + Tolmach 1992 31p 
	#       http://handle.dtic.mil/100.2/ADA255639
	#       http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps 
	#
	#

	# We present posix-theads, barriers, condition variables
	# and mutexes as opaque values to our client packages:
	#
	Pthread;
	Barrier;
	Condvar;
	Mutex;

	Try_Mutex_Result =  ACQUIRED_MUTEX | MUTEX_WAS_UNAVAILABLE;

	exception MAKE_PTRHEAD;

	get_pthread_id:		Void -> Int;

	spawn_pthread:		fat::Fate(Void) -> Pthread;
	join_pthread:		Pthread -> Void;
	pthread_exit:		Void -> X;

	# Mutual-exclusion locks:
	#
	make_mutex:		Void -> Mutex;
	free_mutex:		Mutex -> Void;
	set_mutex:		(Mutex, Null_Or(Void)) -> Void;				# For now, always use NULL as the arg. (Futureproofing.)
	clear_mutex:		Mutex -> Void;
	acquire_mutex:		Mutex -> Void;
	release_mutex:		Mutex -> Void;
	try_mutex:		Mutex -> Try_Mutex_Result;

	# Condition variables:
	#
	make_condvar:		Void -> Condvar;
	free_condvar:		Condvar -> Void;
	set_condvar:		(Condvar, Null_Or(Void)) -> Void;			# For now, always use NULL as the arg. (Futureproofing.)
	clear_condvar:		Condvar -> Void;
	wait_on_condvar:	(Condvar, Mutex) -> Void;
	signal_condvar:		Condvar -> Void;
	broadcast_condvar:	Condvar -> Void;

	# Barriers: Nobody proceeds until everyone proceeds:
	#
	make_barrier:		Void -> Barrier;
	free_barrier:		Barrier -> Void;
	set_barrier:		{ barrier: Barrier, threads: Int } -> Void;		# 'threads' is number of threads which must arrive at barrier before it will release them.
	clear_barrier:		Barrier -> Void;
	wait_on_barrier:	Barrier -> Bool;					# Exactly one pthread waiting at barrier gets TRUE value.
    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
