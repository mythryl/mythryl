## threadkit-socket.pkg

# Compiled by:
#     src/lib/std/standard.lib



stipulate
    package ps  =  threadkit_proto_socket;			# threadkit_proto_socket	is from   src/lib/std/src/socket/threadkit-proto-socket.pkg
    package md  =  maildrop;					# maildrop			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.pkg
    package sok =  socket;					# socket			is from   src/lib/std/socket.pkg
    package tk  =  threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein

    package   threadkit_socket
    : (weak)  Threadkit_Socket					# Threadkit_Socket		is from   src/lib/std/src/socket/threadkit-socket.api
    {
	include threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
	#

								# Sockets are typeagnostic.
								# The instantiation of the type variables
								# provides a way to distinguish between
								# different kinds of sockets.
	#
	Threadkit_Socket( A_af, A_sock )
	    =
	    ps::Threadkit_Socket( A_af, A_sock ); 

	Socket_Address( A_af )
	    =
	    sok::Socket_Address( A_af );

	Datagram  =  sok::Datagram;				# Witness types for the socket parameter.
	Stream(X) =  sok::Stream(X);
	Passive   =  sok::Passive;
	Active    =  sok::Active;

	package af= sok::af;					# Address families.

	package socket = sok::socket;				# Socket types.

	# Socket control operations:
	#
	package control {

	    fun wrap_set f (ps::THREADKIT_SOCKET { socket, ... }, v) = f (socket, v);
	    fun wrap_get f (ps::THREADKIT_SOCKET { socket, ... } )   = f socket;

	    # Get/set socket options:
	    #
	    fun get_debug      arg =  wrap_get     sok::control::get_debug  arg;
	    fun set_debug      arg =  wrap_set     sok::control::set_debug  arg;
	    #
	    fun get_reuseaddr  arg =  wrap_get  sok::control::get_reuseaddr  arg;
	    fun set_reuseaddr  arg =  wrap_set  sok::control::set_reuseaddr  arg;
	    fun get_keepalive  arg =  wrap_get  sok::control::get_keepalive  arg;
	    fun set_keepalive  arg =  wrap_set  sok::control::set_keepalive  arg;
	    fun get_dontroute  arg =  wrap_get  sok::control::get_dontroute  arg;
	    fun set_dontroute  arg =  wrap_set  sok::control::set_dontroute  arg;
	    #
	    fun get_linger     arg =  wrap_get    sok::control::get_linger  arg;
	    fun set_linger     arg =  wrap_set    sok::control::set_linger  arg;
	    #
	    fun get_broadcast  arg =  wrap_get  sok::control::get_broadcast  arg;
	    fun set_broadcast  arg =  wrap_set  sok::control::set_broadcast  arg;
	    fun get_oobinline  arg =  wrap_get  sok::control::get_oobinline  arg;
	    fun set_oobinline  arg =  wrap_set  sok::control::set_oobinline  arg;
	    #
	    fun get_sndbuf     arg =  wrap_get    sok::control::get_sndbuf  arg;
	    fun set_sndbuf     arg =  wrap_set    sok::control::set_sndbuf  arg;
	    fun get_rcvbuf     arg =  wrap_get    sok::control::get_rcvbuf  arg;
	    fun set_rcvbuf     arg =  wrap_set    sok::control::set_rcvbuf  arg;
	    #
	    fun get_type       arg =  wrap_get     sok::control::get_type   arg;
	    fun get_error      arg =  wrap_get     sok::control::get_error  arg;
	    #
	    fun get_peer_name  arg =  wrap_get  sok::control::get_peer_name  arg;
	    fun get_sock_name  arg =  wrap_get  sok::control::get_sock_name  arg;
	    #
	    fun get_nread  arg = wrap_get    sok::control::get_nread arg;
	    fun get_atmark arg = wrap_get    sok::control::get_atmark arg;

	};				# package control 

	# Socket address operations 
	#
	same_address      = sok::same_address;
	family_of_address = sok::family_of_address;

	# Socket management 
	#
	stipulate
	    #
	    include threadkit;							# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

	    fun accept_nonblocking' socket
		=
		case (sok::accept_nonblocking  socket)
		    #              
		    THE (socket', address)
			=>
			THE (ps::make_socket socket', address);

		    NULL => NULL;
		esac;

	    fun accept' socket
		=
		{   (sok::accept  socket)
			->
			(socket', address);

		    (ps::make_socket socket', address);
		};
	herein

	    fun accept_mailop (sock as ps::THREADKIT_SOCKET { socket, ... } )
		=
		tk::dynamic_mailop .{
		    #
		    case (accept_nonblocking' socket)
			#
			THE result =>  always' result;

			NULL       =>  ps::socket_read_now_possible_on'  sock
					   ==>
					   (fn _ = accept' socket);
		    esac;
		};

	    fun accept (sock as ps::THREADKIT_SOCKET { socket, ... } )
		=
		case (accept_nonblocking' socket)
		    #
		    THE result =>   result;

		    NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  sock);
					#
					accept' socket;
				    };
		esac;
	end;


	fun bind (ps::THREADKIT_SOCKET { socket, ... }, address)
	    =
	    sok::bind (socket, address);


	fun connect_mailop (skt as ps::THREADKIT_SOCKET { socket, ... }, address)
	    =
	    tk::dynamic_mailop .{
		#
		if (sok::connect_nonblocking (socket, address))		always' ();
		else							ps::socket_write_now_possible_on'  skt;
		fi;
	    };


	fun connect (skt as ps::THREADKIT_SOCKET { socket, ... }, address)
	    =
	    if (not (sok::connect_nonblocking (socket, address)))
		#
		block_until_mailop_fires (ps::socket_write_now_possible_on' skt);
	    fi;


	fun listen (ps::THREADKIT_SOCKET { socket, ... }, n)
	    =
	    sok::listen (socket, n);


	fun close (ps::THREADKIT_SOCKET { socket, state } )
	    =
	    {   case (md::empty  state)
		    #	      
		    ps::CLOSED =>   ();
		    _          =>   sok::close socket;
		esac;

		md::fill (state, ps::CLOSED);
	    };

	stipulate
	    package s' : (weak) api {    Shutdown_Mode = NO_RECVS | NO_SENDS | NO_RECVS_OR_SENDS;   }
		=
		sok;
	herein
	    include s';
	end;

	fun shutdown (ps::THREADKIT_SOCKET { socket, ... }, how)
	    =
	    sok::shutdown  (socket, how);


	Socket_Descriptor
	    =
	    sok::Socket_Descriptor;


	fun io_descriptor (ps::THREADKIT_SOCKET { socket, ... } )
	    =
	    sok::io_descriptor  socket;


	fun socket_descriptor (ps::THREADKIT_SOCKET { socket, ... } )
	    =
	    sok::socket_descriptor  socket;

	same_descriptor = sok::same_descriptor;

	select = sok::select;

	# Socket I/O option types 
	#
	Out_Flags = { don't_route: Bool,   oob:  Bool };
	In_Flags  = { peek:        Bool,   oob:  Bool };

	Buf(X)    = { buf:   X,
		      i:     Int,
		      size:  Null_Or( Int )
		    };

	# Socket output operations:
	#
	fun send_vector (sock as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    case (sok::send_vector_nonblocking (socket, buf))
		#
		THE result => result;
		#
		NULL       =>   {   block_until_mailop_fires (ps::socket_write_now_possible_on' sock);
				    #
				    sok::send_vector (socket, buf);
			        };
	    esac;

	fun send_rw_vector (skt as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    case (sok::send_rw_vector_nonblocking (socket, buf))
		#
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_write_now_possible_on' skt);
				    #
				    sok::send_rw_vector  (socket, buf);
				};
	    esac;

	fun send_vector' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    case (sok::send_vector_nonblocking' (socket, buf, flgs))
		#
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires  (ps::socket_write_now_possible_on'  skt);
				    #
				    sok::send_vector' (socket, buf, flgs);
				};
	    esac;

	fun send_rw_vector' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    case (sok::send_rw_vector_nonblocking' (socket, buf, flgs))
		#
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_write_now_possible_on'  skt);
				    #
				    sok::send_rw_vector' (socket, buf, flgs);
				};
	    esac;

	fun send_vector_to (skt as ps::THREADKIT_SOCKET { socket, ... }, address, buf)
	    =
	    if (not (sok::send_vector_to_nonblocking (socket, address, buf)))
		#
		block_until_mailop_fires (ps::socket_write_now_possible_on' skt);
		#
		sok::send_vector_to (socket, address, buf);
	    fi;

	fun send_rw_vector_to (skt as ps::THREADKIT_SOCKET { socket, ... }, address, buf)
	    =
	    if (not (sok::send_rw_vector_to_nonblocking (socket, address, buf)))
		#
		block_until_mailop_fires (ps::socket_write_now_possible_on'  skt);
		#
		sok::send_rw_vector_to  (socket, address, buf);
	    fi;

	fun send_vector_to' (skt as ps::THREADKIT_SOCKET { socket, ... }, address, buf, flgs)
	    =
	    if (not (sok::send_vector_to_nonblocking' (socket, address, buf, flgs)))
		#
		block_until_mailop_fires (ps::socket_write_now_possible_on' skt);
		#
		sok::send_vector_to' (socket, address, buf, flgs);
	    fi;

	fun send_rw_vector_to' (sock as ps::THREADKIT_SOCKET { socket, ... }, address, buf, flgs)
	    =
	    if (not (sok::send_rw_vector_to_nonblocking' (socket, address, buf, flgs)))
		#
		block_until_mailop_fires (ps::socket_write_now_possible_on'  sock);
		#
		sok::send_rw_vector_to' (socket, address, buf, flgs);
	    fi;

	# Socket input operations 
	#
	fun receive_vector (skt as ps::THREADKIT_SOCKET { socket, ... }, n)
	    =
	    case (sok::receive_vector_nonblocking (socket, n))
		#	  
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on' skt);
				    #
				    sok::receive_vector (socket, n);
				};
	    esac;

	fun receive_rw_vector (skt as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    case (sok::receive_rw_vector_nonblocking (socket, buf))
		#
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_rw_vector (socket, buf);
				};
	    esac;

	fun receive_vector' (skt as ps::THREADKIT_SOCKET { socket, ... }, n, flgs)
	    =
	    case (sok::receive_vector_nonblocking' (socket, n, flgs))
		#	  
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_vector' (socket, n, flgs);
				};
	    esac;

	fun receive_rw_vector' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    case (sok::receive_rw_vector_nonblocking' (socket, buf, flgs))
		#
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_rw_vector' (socket, buf, flgs);
				};
	    esac;

	fun receive_vector_from (skt as ps::THREADKIT_SOCKET { socket, ... }, n)
	    =
	    case (sok::receive_vector_from_nonblocking (socket, n))
		#	  
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_vector_from (socket, n);
				};
	    esac;

	fun receive_rw_vector_from (skt as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    case (sok::receive_rw_vector_from_nonblocking (socket, buf))
		#	  
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_rw_vector_from (socket, buf);
				};
	    esac;

	fun receive_vector_from' (skt as ps::THREADKIT_SOCKET { socket, ... }, n, flgs)
	    =
	    case (sok::receive_vector_from_nonblocking' (socket, n, flgs))
		#	  
		THE result =>   result;

		NULL       =>   {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_vector_from' (socket, n, flgs);
				};
	    esac;

	fun receive_rw_vector_from' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    case (sok::receive_rw_vector_from_nonblocking' (socket, buf, flgs))
		#
		THE result  =>  result;

		NULL	=>  {   block_until_mailop_fires (ps::socket_read_now_possible_on'  skt);
				    #
				    sok::receive_rw_vector_from' (socket, buf, flgs);
				};
	    esac;


	# Socket input mailop constructors 
	#
	fun receive_vector_mailop (skt as ps::THREADKIT_SOCKET { socket, ... }, n)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_vector_nonblocking  (socket, n))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
				        ==>
				        (fn _ =  sok::receive_vector (socket, n));
		esac;
	    };

	fun receive_rw_vector_mailop (skt as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_rw_vector_nonblocking  (socket, buf))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ = sok::receive_rw_vector (socket, buf));
		esac;
	    };

	fun receive_vector_mailop' (skt as ps::THREADKIT_SOCKET { socket, ... }, n, flgs)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_vector_nonblocking'  (socket, n, flgs))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ = sok::receive_vector' (socket, n, flgs));
		esac;
	    };

	fun receive_rw_vector_mailop' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_rw_vector_nonblocking'  (socket, buf, flgs))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ = sok::receive_rw_vector' (socket, buf, flgs));
		esac;
	    };

	fun receive_vector_from_mailop (skt as ps::THREADKIT_SOCKET { socket, ... }, n)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_vector_from_nonblocking  (socket, n))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ = sok::receive_vector_from (socket, n));
		esac;
	    };

	fun receive_rw_vector_from_mailop (skt as ps::THREADKIT_SOCKET { socket, ... }, buf)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_rw_vector_from_nonblocking (socket, buf))
		    #
		    THE result  =>  always'  result;

		    NULL        =>  ps::socket_read_now_possible_on'  skt
					==>
					(fn _ =  sok::receive_rw_vector_from (socket, buf));
		esac;
	    };

	fun receive_vector_from_mailop' (skt as ps::THREADKIT_SOCKET { socket, ... }, n, flgs)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_vector_from_nonblocking'  (socket, n, flgs))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ =  sok::receive_vector_from' (socket, n, flgs));
		esac;
	    };

	fun receive_rw_vector_from_mailop' (skt as ps::THREADKIT_SOCKET { socket, ... }, buf, flgs)
	    =
	    tk::dynamic_mailop .{
		#
		case (sok::receive_rw_vector_from_nonblocking' (socket, buf, flgs))
		    #
		    THE result =>   always'  result;

		    NULL       =>   ps::socket_read_now_possible_on'  skt
					==>
					(fn _ = sok::receive_rw_vector_from' (socket, buf, flgs));
		esac;
	    };

    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
